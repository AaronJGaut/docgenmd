#!/usr/bin/env python
import sys
import os
import subprocess

MAKEFILE = """
beamer_pdf: main_beamer.pdf

all: beamer_pdf pdf

pdf: main.pdf

clean:
	rm -rf build_beamer_pdf build_pdf main_beamer.pdf main.pdf

.PHONY: all beamer_pdf pdf clean

main_beamer.pdf: build_beamer_pdf/main.tex | build_beamer_pdf/resources
	cd build_beamer_pdf && pdflatex -halt-on-error main.tex
	cd build_beamer_pdf && pdflatex -halt-on-error main.tex
	mv build_beamer_pdf/main.pdf $@

main.pdf: build_pdf/main.tex | build_pdf/resources
	cd build_pdf && pdflatex -halt-on-error main.tex
	cd build_pdf && pdflatex -halt-on-error main.tex
	mv build_pdf/main.pdf $@

build_beamer_pdf/main.tex: main.md | build_beamer_pdf
	pandoc -s -t beamer -o $@ $<

build_pdf/main.tex: main.md | build_pdf
	pandoc -s -t latex -o $@ $<

build_beamer_pdf build_pdf:
	mkdir -p $@

build_%/resources: | build_%
	ln -s ../resources $@
""".strip()

MARKDOWN = """
---
title: 'My title'
author: 'My author'
---

Hello world!
""".strip()

README = """
# `{}`

pandoc project auto-generated by docgenmd
""".strip()


def print_usage():
    lines = [
        "Usage:",
        "\tdocgenmd <DIR_PATH>",
        "",
        "<DIR_PATH>: path of new directory to be created",
        "",
    ]
    sys.stderr.write(("\n".join(lines)))
    sys.stderr.flush()


def main(dir_path):
    old_cwd = os.getcwd()
    try:
        _gen_workspace(dir_path)
    except BaseException as e:
        sys.stderr.write("{}\n".format(e))
        sys.stderr.flush()
        return 1
    else:
        return 0
    finally:
        os.chdir(old_cwd)

def _gen_workspace(dir_path):
    realpath = os.path.realpath(dir_path)
    project_name = os.path.basename(realpath)
    os.mkdir(realpath)
    os.chdir(realpath)
    with open("Makefile", "w") as f:
        f.write(MAKEFILE)
    with open("main.md", "w") as f:
        f.write(MARKDOWN)
    with open("README.md", "w") as f:
        f.write(README.format(project_name))
    os.mkdir("resources")
    with open("resources/.gitkeep", "w"):
        pass
    subprocess.check_call(["git", "init"])
    files = ["Makefile", "main.md", "README.md", "resources"]
    subprocess.check_call(["git", "add"] + files)
    subprocess.check_call(["git", "commit", "-m", "Initial commit"])


if __name__ == "__main__":
    if len(sys.argv) != 2:
        print_usage()
        sys.exit(2)
    dir_path = sys.argv[1]
    sys.exit(main(dir_path))
